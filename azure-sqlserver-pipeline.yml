# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: $(TeamProject)-$(Date:yyyyMMdd)$(Rev:-r)

variables:
    projectName: AdventureWorksExample

trigger:
- master

# Using the default pool, because it is the one with the self-hosted agent, required by builds using Sql Server Data Tools.
pool: default

steps:
- checkout: self  # self represents the repo where the initial Pipelines YAML file was found
  clean: true
  path: source

# Azure Key Vault
# Download Azure Key Vault secrets
- task: AzureKeyVault@1
  displayName: Retrieve Secrets from Azure Key Vault
  inputs:
    azureSubscription: 'Teach For America'
    KeyVaultName: 'ssiscicdAKV'
    SecretsFilter: '*'

- task: Kubernetes@1
  displayName: kubectl create namespace pipeline-$(Build.BuildNumber)
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Teach For America'
    azureResourceGroup: '$(azureResourceGroup)'
    kubernetesCluster: '$(kubernetesCluster)'
    command: 'create'
    arguments: namespace pipeline-$(Build.BuildNumber)
    outputFormat: 'yaml'
    
- task: Kubernetes@1
  displayName: kubectl setup secret for sqlserver sa password
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Teach For America'
    azureResourceGroup: '$(azureResourceGroup)'
    kubernetesCluster: '$(kubernetesCluster)'
    namespace: 'pipeline-$(Build.BuildNumber)'
    command: 'create'
    arguments: 'secret generic mssql --from-literal=SA_PWD="MyC0m9l&xP@ssw0rd"'
    outputFormat: 'yaml'    

- task: Kubernetes@1
  displayName: kubectl apply deployment in pipeline-$(Build.BuildNumber)
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Teach For America'
    azureResourceGroup: '$(azureResourceGroup)'
    kubernetesCluster: '$(kubernetesCluster)'
    namespace: 'pipeline-$(Build.BuildNumber)'
    command: 'apply'
    useConfigurationFile: true
    configuration: aks\mssqlssis.deployment.yaml
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'
    outputFormat: 'yaml'

- task: PowerShell@1
  displayName: Login to Azure Cloud and set podName variable
  inputs:
    scriptType: 'inlineScript'
    inlineScript: |
      &az login --service-principal -u $(ssiscicdServicePrincipalURL) -p $(ssiscicdServicePrincipalPassword) --tenant $(ssiscicdTenantId)
      &az aks get-credentials --resource-group $(azureResourceGroup) --name $(kubernetesCluster)
      # Get all running pods in the namespace
      $content = &kubectl get pods -n pipeline-$(Build.BuildNumber) --field-selector=status.phase=Running 2>&1
      # Ensure that this task does not run for more than about 90 seconds
      $waitLimit = 90
      $timeWaiting = 0
      While (($content -like 'No resources found*') -and ($timeWaiting -lt $waitLimit))
      {
      start-sleep -Seconds 5
      $timeWaiting = $timeWaiting + 5
      $content = &kubectl get pods -n pipeline-$(Build.BuildNumber) --field-selector=status.phase=Running 2>&1
      }
      $content = &kubectl get pods -n pipeline-$(Build.BuildNumber) --field-selector=status.phase=Running -o jsonpath="{.items[0].metadata.name}"
      Write-Host $content
      Write-Host "##vso[task.setvariable variable=podName;]$content"

- task: Kubernetes@1
  displayName: kubectl create the service for the deployment in pipeline-$(Build.BuildNumber)
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Teach For America'
    azureResourceGroup: '$(azureResourceGroup)'
    kubernetesCluster: '$(kubernetesCluster)'
    namespace: 'pipeline-$(Build.BuildNumber)'
    command: 'expose'
    arguments: 'deployment mssqlssis-deployment --type=LoadBalancer --name=mssqlssis-service --port=$(port) --target-port=1433'
    outputFormat: 'yaml'

- task: PowerShell@1
  displayName: Login to Azure Cloud and set ipAddress variable
  inputs:
    scriptType: 'inlineScript'
    inlineScript: |
      &az login --service-principal -u $(ssiscicdServicePrincipalURL) -p $(ssiscicdServicePrincipalPassword) --tenant $(ssiscicdTenantId)
      &az aks get-credentials --resource-group $(azureResourceGroup) --name $(kubernetesCluster)
      # Get ipAddress for service in namespace
      $content = &kubectl get services -n pipeline-$(Build.BuildNumber) -o jsonpath="{.items[0].status.loadBalancer.ingress[0].ip}"
      # Ensure that this task does not run for more than about 90 seconds
      $waitLimit = 90
      $timeWaiting = 0
      While ([String]::IsNullOrWhiteSpace($content) -and ($timeWaiting -lt $waitLimit))
      {
      start-sleep -Seconds 5
      $timeWaiting = $timeWaiting + 5
      $content = &kubectl get services -n pipeline-$(Build.BuildNumber) -o jsonpath="{.items[0].status.loadBalancer.ingress[0].ip}"
      }
      $content = &kubectl get services -n pipeline-$(Build.BuildNumber) -o jsonpath="{.items[0].status.loadBalancer.ingress[0].ip}"
      Write-Host $content
      Write-Host "##vso[task.setvariable variable=ipAddress;]$content"

- task: PowerShell@1
  displayName: Pause the pipeline
  inputs:
    scriptType: 'inlineScript'
    workingFolder: '$(Agent.BuildDirectory)\source'
    inlineScript: |      
      start-sleep -Seconds 300

- task: Kubernetes@1
  displayName: kubectl delete namespace pipeline-$(Build.BuildNumber)
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Teach For America'
    azureResourceGroup: '$(azureResourceGroup)'
    kubernetesCluster: '$(kubernetesCluster)'
    command: 'delete'
    arguments: namespace pipeline-$(Build.BuildNumber)
    outputFormat: 'yaml'
